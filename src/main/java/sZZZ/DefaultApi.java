/*
 * API сервиса prepaid карты для Партнёра
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.3.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sZZZ;

import com.google.gson.reflect.TypeToken;
import io.restassured.filter.log.LogDetail;
import sZZZ.model.AtmDetailedInfosResponse;
import sZZZ.model.AtmResponse;
import sZZZ.model.AtmShortInfosResponse;
import sZZZ.model.BindedExternalCardsResponse;
import sZZZ.model.Card2CardTransferCommissionResponse;
import sZZZ.model.Card2CardTransferResponse;
import sZZZ.model.Card2ardTransferRequest;
import sZZZ.model.ConfirmQRPaymentRequest;
import sZZZ.model.ConfirmQRPaymentResponse;
import sZZZ.model.CreateInAppProvisioningAppleRequest;
import sZZZ.model.CreateInAppProvisioningAppleResponse;
import sZZZ.model.CreateInAppProvisioningGoogleRequest;
import sZZZ.model.CreateInAppProvisioningGoogleResponse;
import sZZZ.model.CreateInAppProvisioningMirRequest;
import sZZZ.model.CreateInAppProvisioningMirResponse;
import sZZZ.model.CreateQRPaymentRequest;
import sZZZ.model.CreateQRPaymentResponse;
import sZZZ.model.CreateRefundRequest;
import sZZZ.model.CreateRefundResponse;
import sZZZ.model.CreateVendorPaymentRequest;
import sZZZ.model.CreateVendorPaymentResponse;
import sZZZ.model.GetCardLimitsResponse;
import sZZZ.model.GetCardResponse;
import sZZZ.model.GetCardTransactionsResponse;
import sZZZ.model.GetCardsPublicKeyResponse;
import sZZZ.model.GetClientByPhoneResponse;
import sZZZ.model.GetClientRegistrationPublicKeyResponse;
import sZZZ.model.GetClientRegistrationResponse;
import sZZZ.model.GetQRPaymentResponse;
import sZZZ.model.GetRefundResponse;
import sZZZ.model.GetRegAgreements;
import sZZZ.model.GetSecretWordPublicKeyResponse;
import sZZZ.model.GetUpridAuthEsiaLinkResponse;
import sZZZ.model.GetUpridResponse;
import sZZZ.model.GetUserCardsResponse;
import sZZZ.model.GetVendorPaymentResponse;
import sZZZ.model.SaveAgreementsRequest;
import sZZZ.model.UpdateCardRequest;
import sZZZ.model.UpdateCardResponse;
import sZZZ.model.UpdateClientRegistrationRequest;
import sZZZ.model.UpdateClientSecretWordRequest;
import sZZZ.model.UpdateClientSecretWordResponse;
import sZZZ.model.UpdateVendorPaymentRequest;
import sZZZ.model.UpdateVendorPaymentResponse;
import sZZZ.model.UpridSmevRequest;
import sZZZ.model.VendorCategoriesResponse;
import sZZZ.model.VendorCategoryVendorsResponse;
import sZZZ.model.VendorPaymentDataResponse;

import java.util.Arrays;
import java.util.List;

import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import static io.restassured.http.Method.*;

@Api(value = "")
public class DefaultApi {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private DefaultApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static DefaultApi defaultApi(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new DefaultApi(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        reqSpec.log(LogDetail.ALL);
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                atmsAtmIdGet(),
                cancelQRPayment(),
                card2CardTransfer(),
                cardsCardIdGet(),
                cardsCardIdInAppProvisioningApplePost(),
                cardsCardIdInAppProvisioningGooglePost(),
                cardsCardIdInAppProvisioningMirPost(),
                cardsCardIdLimitsGet(),
                cardsCardIdPut(),
                clientsCardsGet(),
                clientsSecretWordPut(),
                confirmPaymentVendor(),
                confirmQRPayment(),
                createPaymentVendor(),
                createQRPayment(),
                createRefund(),
                createUpridSmev(),
                deleteBindedExternalCard(),
                getAgreements(),
                getAtmsFilteredList(),
                getAtmsList(),
                getBindedExternalCards(),
                getCard2CardTransferComission(),
                getClientRegistrationPublicKey(),
                getPaymentVendor(),
                getPublicKey(),
                getQRPayment(),
                getRefund(),
                getSecretWordPublicKey(),
                getUprid(),
                getUpridAuthEsiaLinkResponse(),
                getVendorCategories(),
                getVendorPaymentData(),
                getVerdorCategories(),
                saveAgreements(),
                searchClient(),
                searchClientRegistration(),
                transactionsCardsCardIdGet(),
                updateOrCreateClientRegistration()
        );
    }

    @ApiOperation(value = "Получить полную информацию о банкомате",
            notes = "",
            nickname = "atmsAtmIdGet",
            tags = { "Банкоматы" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public AtmsAtmIdGetOper atmsAtmIdGet() {
        return new AtmsAtmIdGetOper(createReqSpec());
    }

    @ApiOperation(value = "Отменить QR платеж",
            notes = "",
            nickname = "cancelQRPayment",
            tags = { "Платежи" })
    @ApiResponses(value = { 
            @ApiResponse(code = 204, message = "No Content") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 422, message = "Unprocessable Entity") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public CancelQRPaymentOper cancelQRPayment() {
        return new CancelQRPaymentOper(createReqSpec());
    }

    @ApiOperation(value = "Перевести с карты на карту (пополнение или вывод средств)",
            notes = "",
            nickname = "card2CardTransfer",
            tags = { "Переводы" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public Card2CardTransferOper card2CardTransfer() {
        return new Card2CardTransferOper(createReqSpec());
    }

    @ApiOperation(value = "Получить данные по карте",
            notes = "Праметры указанные в query как <параметр>Only, можно получить только по отдельности и только без остальных полей модели карты. Вызов метода с указанием двух таких query-параметров, например balanceOnly = true и encryptedPanOnly = true, приведёт к ошибке Bad Request. Поле fields не заполняется при указании поля <Параметр>Only = true.",
            nickname = "cardsCardIdGet",
            tags = { "Карты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public CardsCardIdGetOper cardsCardIdGet() {
        return new CardsCardIdGetOper(createReqSpec());
    }

    @ApiOperation(value = "Добавить карту в электронный кошелёк Apple Wallet",
            notes = "",
            nickname = "cardsCardIdInAppProvisioningApplePost",
            tags = { "Карты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public CardsCardIdInAppProvisioningApplePostOper cardsCardIdInAppProvisioningApplePost() {
        return new CardsCardIdInAppProvisioningApplePostOper(createReqSpec());
    }

    @ApiOperation(value = "Добавить карту в электронный кошелёк Google Pay",
            notes = "",
            nickname = "cardsCardIdInAppProvisioningGooglePost",
            tags = { "Карты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public CardsCardIdInAppProvisioningGooglePostOper cardsCardIdInAppProvisioningGooglePost() {
        return new CardsCardIdInAppProvisioningGooglePostOper(createReqSpec());
    }

    @ApiOperation(value = "Добавить карту в электронный кошелёк MirPay",
            notes = "",
            nickname = "cardsCardIdInAppProvisioningMirPost",
            tags = { "Карты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public CardsCardIdInAppProvisioningMirPostOper cardsCardIdInAppProvisioningMirPost() {
        return new CardsCardIdInAppProvisioningMirPostOper(createReqSpec());
    }

    @ApiOperation(value = "Получить лимиты и ограничения карты по идентификатору карты",
            notes = "",
            nickname = "cardsCardIdLimitsGet",
            tags = { "Карты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public CardsCardIdLimitsGetOper cardsCardIdLimitsGet() {
        return new CardsCardIdLimitsGetOper(createReqSpec());
    }

    @ApiOperation(value = "Установить PIN-код или заблокировать карту",
            notes = "Для блокировки карты требуется передавать значение поля status, для установки PIN-кода поля модели CardPin. Одновременная передача данных по статусу и PIN-коду приведёт к ошибке Bad Request. При успешной блокировке или установке PIN-кода возвращается статус 204 No Content. В случае, если требуется подтверждение через OTP, то код ответа будет 200 OK и возвращён объект confirmationData. Для ввода OTP необходимо повторить запрос, заполнив поля объекта confirmationData данными из sms и предшедствующего запроса.",
            nickname = "cardsCardIdPut",
            tags = { "Карты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 204, message = "No content") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 422, message = "Unprocessable Entity") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public CardsCardIdPutOper cardsCardIdPut() {
        return new CardsCardIdPutOper(createReqSpec());
    }

    @ApiOperation(value = "Получить карты клиента",
            notes = "",
            nickname = "clientsCardsGet",
            tags = { "Клиенты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public ClientsCardsGetOper clientsCardsGet() {
        return new ClientsCardsGetOper(createReqSpec());
    }

    @ApiOperation(value = "Установить секретное слово клиента",
            notes = "",
            nickname = "clientsSecretWordPut",
            tags = { "Клиенты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 204, message = "No content") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 422, message = "Unprocessable Entity") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public ClientsSecretWordPutOper clientsSecretWordPut() {
        return new ClientsSecretWordPutOper(createReqSpec());
    }

    @ApiOperation(value = "Исполнить платёж в пользу поставщика услуги",
            notes = "Метод вызывается без тела запроса. При успешном исполнении платежа возвращается статус 204 No Content. В случае, если требуется подтверждение через OTP, то код ответа будет 200 OK и возвращён объект confirmationData. Для ввода OTP необходимо повторить запрос, передав тело запроса с заполненными полями объекта confirmationData данными из SMS и предшедствующего запроса.",
            nickname = "confirmPaymentVendor",
            tags = { "Платежи" })
    @ApiResponses(value = { 
            @ApiResponse(code = 204, message = "No Content") ,
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public ConfirmPaymentVendorOper confirmPaymentVendor() {
        return new ConfirmPaymentVendorOper(createReqSpec());
    }

    @ApiOperation(value = "Исполнить QR платеж",
            notes = "",
            nickname = "confirmQRPayment",
            tags = { "Платежи" })
    @ApiResponses(value = { 
            @ApiResponse(code = 201, message = "Created") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 422, message = "Unprocessable Entity") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public ConfirmQRPaymentOper confirmQRPayment() {
        return new ConfirmQRPaymentOper(createReqSpec());
    }

    @ApiOperation(value = "Зарегистрировать платеж в пользу поставщика услуги",
            notes = "",
            nickname = "createPaymentVendor",
            tags = { "Платежи" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public CreatePaymentVendorOper createPaymentVendor() {
        return new CreatePaymentVendorOper(createReqSpec());
    }

    @ApiOperation(value = "Зарегистрировать QR платеж",
            notes = "",
            nickname = "createQRPayment",
            tags = { "Платежи" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 422, message = "Unprocessable Entity") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public CreateQRPaymentOper createQRPayment() {
        return new CreateQRPaymentOper(createReqSpec());
    }

    @ApiOperation(value = "Запросить возврат по QR платежу",
            notes = "",
            nickname = "createRefund",
            tags = { "Возвраты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 422, message = "Unprocessable Entity") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public CreateRefundOper createRefund() {
        return new CreateRefundOper(createReqSpec());
    }

    @ApiOperation(value = "Провести упрощённую идентификацию клиента через СМЭВ",
            notes = "",
            nickname = "createUpridSmev",
            tags = { "Упрощённая идентификация" })
    @ApiResponses(value = { 
            @ApiResponse(code = 202, message = "Accepted") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 422, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public CreateUpridSmevOper createUpridSmev() {
        return new CreateUpridSmevOper(createReqSpec());
    }

    @ApiOperation(value = "Удалить привязанную внешнюю карту",
            notes = "",
            nickname = "deleteBindedExternalCard",
            tags = { "Клиенты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 204, message = "No content") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public DeleteBindedExternalCardOper deleteBindedExternalCard() {
        return new DeleteBindedExternalCardOper(createReqSpec());
    }

    @ApiOperation(value = "Получение текста согласий",
            notes = "Получение текста согласий с Персональными Данными, с Правилами пользования, с УПРИД",
            nickname = "getAgreements",
            tags = { "Клиенты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK")  })
    public GetAgreementsOper getAgreements() {
        return new GetAgreementsOper(createReqSpec());
    }

    @ApiOperation(value = "Получить список ближайших банкоматов с детальной информацией",
            notes = "",
            nickname = "getAtmsFilteredList",
            tags = { "Банкоматы" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetAtmsFilteredListOper getAtmsFilteredList() {
        return new GetAtmsFilteredListOper(createReqSpec());
    }

    @ApiOperation(value = "Получить список ближайших банкоматов с минимальной информацией",
            notes = "",
            nickname = "getAtmsList",
            tags = { "Банкоматы" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetAtmsListOper getAtmsList() {
        return new GetAtmsListOper(createReqSpec());
    }

    @ApiOperation(value = "Получить список привязанных внешних карт",
            notes = "",
            nickname = "getBindedExternalCards",
            tags = { "Клиенты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetBindedExternalCardsOper getBindedExternalCards() {
        return new GetBindedExternalCardsOper(createReqSpec());
    }

    @ApiOperation(value = "Получить комиссию по переводу с карты на карту",
            notes = "",
            nickname = "getCard2CardTransferComission",
            tags = { "Переводы" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetCard2CardTransferComissionOper getCard2CardTransferComission() {
        return new GetCard2CardTransferComissionOper(createReqSpec());
    }

    @ApiOperation(value = "Сгенерировать публичный ключ для шифрования данных клиента для регистрации",
            notes = "",
            nickname = "getClientRegistrationPublicKey",
            tags = { "Клиенты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetClientRegistrationPublicKeyOper getClientRegistrationPublicKey() {
        return new GetClientRegistrationPublicKeyOper(createReqSpec());
    }

    @ApiOperation(value = "Получить информацию о платеже в пользу поставщика услуги",
            notes = "",
            nickname = "getPaymentVendor",
            tags = { "Платежи" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetPaymentVendorOper getPaymentVendor() {
        return new GetPaymentVendorOper(createReqSpec());
    }

    @ApiOperation(value = "Сгенерировать публичный ключ для шифрования данных по карте (PIN-код)",
            notes = "",
            nickname = "getPublicKey",
            tags = { "Карты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetPublicKeyOper getPublicKey() {
        return new GetPublicKeyOper(createReqSpec());
    }

    @ApiOperation(value = "Получить информацию о QR платеже",
            notes = "",
            nickname = "getQRPayment",
            tags = { "Платежи" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 422, message = "Unprocessable Entity") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetQRPaymentOper getQRPayment() {
        return new GetQRPaymentOper(createReqSpec());
    }

    @ApiOperation(value = "Получить информацию о возврате по QR платежу",
            notes = "",
            nickname = "getRefund",
            tags = { "Возвраты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 422, message = "Unprocessable Entity") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetRefundOper getRefund() {
        return new GetRefundOper(createReqSpec());
    }

    @ApiOperation(value = "Сгенерировать публичный ключ для шифрования секретного слова клиента",
            notes = "",
            nickname = "getSecretWordPublicKey",
            tags = { "Клиенты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetSecretWordPublicKeyOper getSecretWordPublicKey() {
        return new GetSecretWordPublicKeyOper(createReqSpec());
    }

    @ApiOperation(value = "Получить статус по упрощённой идентификации клиента",
            notes = "",
            nickname = "getUprid",
            tags = { "Упрощённая идентификация" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetUpridOper getUprid() {
        return new GetUpridOper(createReqSpec());
    }

    @ApiOperation(value = "Получить ссылку для прохождения упрощённой идентификации клиента через ЕСИА",
            notes = "",
            nickname = "getUpridAuthEsiaLinkResponse",
            tags = { "Упрощённая идентификация" })
    @ApiResponses(value = { 
            @ApiResponse(code = 202, message = "Accepted") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetUpridAuthEsiaLinkResponseOper getUpridAuthEsiaLinkResponse() {
        return new GetUpridAuthEsiaLinkResponseOper(createReqSpec());
    }

    @ApiOperation(value = "Получить список категорий поставщиков услуг",
            notes = "",
            nickname = "getVendorCategories",
            tags = { "Поставщики услуг" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetVendorCategoriesOper getVendorCategories() {
        return new GetVendorCategoriesOper(createReqSpec());
    }

    @ApiOperation(value = "Получить поля поставщика услуг для оплаты услуги",
            notes = "",
            nickname = "getVendorPaymentData",
            tags = { "Поставщики услуг" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetVendorPaymentDataOper getVendorPaymentData() {
        return new GetVendorPaymentDataOper(createReqSpec());
    }

    @ApiOperation(value = "Получить список поставщиков услуг для категории",
            notes = "",
            nickname = "getVerdorCategories",
            tags = { "Поставщики услуг" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public GetVerdorCategoriesOper getVerdorCategories() {
        return new GetVerdorCategoriesOper(createReqSpec());
    }

    @ApiOperation(value = "Сохранение согласий",
            notes = "",
            nickname = "saveAgreements",
            tags = { "Клиенты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 201, message = "Created") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 404, message = "Not found") ,
            @ApiResponse(code = 500, message = "Bad Request")  })
    public SaveAgreementsOper saveAgreements() {
        return new SaveAgreementsOper(createReqSpec());
    }

    @ApiOperation(value = "Выполнить поиск клиента по номеру телефона",
            notes = "",
            nickname = "searchClient",
            tags = { "Клиенты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public SearchClientOper searchClient() {
        return new SearchClientOper(createReqSpec());
    }

    @ApiOperation(value = "Получить данные о регистрации клиента",
            notes = "",
            nickname = "searchClientRegistration",
            tags = { "Клиенты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public SearchClientRegistrationOper searchClientRegistration() {
        return new SearchClientRegistrationOper(createReqSpec());
    }

    @ApiOperation(value = "Получить список транзакций по карте",
            notes = "",
            nickname = "transactionsCardsCardIdGet",
            tags = { "История операций" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 403, message = "Forbidden") ,
            @ApiResponse(code = 404, message = "Not Found") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public TransactionsCardsCardIdGetOper transactionsCardsCardIdGet() {
        return new TransactionsCardsCardIdGetOper(createReqSpec());
    }

    @ApiOperation(value = "Передать данные для регистрации клиента",
            notes = "",
            nickname = "updateOrCreateClientRegistration",
            tags = { "Клиенты" })
    @ApiResponses(value = { 
            @ApiResponse(code = 201, message = "Created") ,
            @ApiResponse(code = 204, message = "No Content") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 422, message = "Bad Request") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public UpdateOrCreateClientRegistrationOper updateOrCreateClientRegistration() {
        return new UpdateOrCreateClientRegistrationOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public DefaultApi reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Получить полную информацию о банкомате
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #atmIdPath Идентификатор банкомата (required)
     * return AtmResponse
     */
    public static class AtmsAtmIdGetOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/atms/{atmId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public AtmsAtmIdGetOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /atms/{atmId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /atms/{atmId}
         * @param handler handler
         * @return AtmResponse
         */
        public AtmResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<AtmResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public AtmsAtmIdGetOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public AtmsAtmIdGetOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public AtmsAtmIdGetOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public AtmsAtmIdGetOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String ATM_ID_PATH = "atmId";

        /**
         * @param atmId (String) Идентификатор банкомата (required)
         * @return operation
         */
        public AtmsAtmIdGetOper atmIdPath(Object atmId) {
            reqSpec.addPathParam(ATM_ID_PATH, atmId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public AtmsAtmIdGetOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public AtmsAtmIdGetOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Отменить QR платеж
     * 
     *
     * @see #xPartnerAuthenticationHeader Токен авторизации (в формате Bearer {jwt token}) (required)
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #paymentIdPath Идентификатор платежа (required)
     */
    public static class CancelQRPaymentOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/qr-payments/{paymentId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CancelQRPaymentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /qr-payments/{paymentId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String X_PARTNER_AUTHENTICATION_HEADER = "X-Partner-Authentication";

        /**
         * @param xPartnerAuthentication (String) Токен авторизации (в формате Bearer {jwt token}) (required)
         * @return operation
         */
        public CancelQRPaymentOper xPartnerAuthenticationHeader(String xPartnerAuthentication) {
            reqSpec.addHeader(X_PARTNER_AUTHENTICATION_HEADER, xPartnerAuthentication);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public CancelQRPaymentOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public CancelQRPaymentOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public CancelQRPaymentOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public CancelQRPaymentOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String PAYMENT_ID_PATH = "paymentId";

        /**
         * @param paymentId (String) Идентификатор платежа (required)
         * @return operation
         */
        public CancelQRPaymentOper paymentIdPath(Object paymentId) {
            reqSpec.addPathParam(PAYMENT_ID_PATH, paymentId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CancelQRPaymentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CancelQRPaymentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Перевести с карты на карту (пополнение или вывод средств)
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #body  (optional)
     * return Card2CardTransferResponse
     */
    public static class Card2CardTransferOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/transfers/card2card-transfers";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public Card2CardTransferOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /transfers/card2card-transfers
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /transfers/card2card-transfers
         * @param handler handler
         * @return Card2CardTransferResponse
         */
        public Card2CardTransferResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Card2CardTransferResponse>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param card2ardTransferRequest (Card2ardTransferRequest)  (optional)
         * @return operation
         */
        public Card2CardTransferOper body(Card2ardTransferRequest card2ardTransferRequest) {
            reqSpec.setBody(card2ardTransferRequest);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public Card2CardTransferOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public Card2CardTransferOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public Card2CardTransferOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public Card2CardTransferOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public Card2CardTransferOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public Card2CardTransferOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public Card2CardTransferOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить данные по карте
     * Праметры указанные в query как &lt;параметр&gt;Only, можно получить только по отдельности и только без остальных полей модели карты. Вызов метода с указанием двух таких query-параметров, например balanceOnly &#x3D; true и encryptedPanOnly &#x3D; true, приведёт к ошибке Bad Request. Поле fields не заполняется при указании поля &lt;Параметр&gt;Only &#x3D; true.
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #cardIdPath Идентификатор карты (required)
     * @see #xClientOpenKeyHeader Открытый ключ клиента (заполняется только для получения зашифрованных PAN или CVV-кода) (optional)
     * @see #balanceOnlyQuery Вернуть только баланс (optional, default to false)
     * @see #encryptedPanOnlyQuery Вернуть только зашифрованный PAN (optional, default to false)
     * @see #encryptedCvvOnlyQuery Вернуть только зашифрованный CVV-код (optional, default to false)
     * @see #inAppProvisioningTokensOnlyQuery Вернуть только In App Provisioning токены (optional, default to false)
     * @see #fieldsQuery Список возвращаемых полей из модели. maskedPan - маскированный PAN, expiryDate - дата окончания действия, paySystem - платежная система, status - статус, token - токен привязанной карты (optional)
     * return GetCardResponse
     */
    public static class CardsCardIdGetOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/cards/{cardId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CardsCardIdGetOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /cards/{cardId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /cards/{cardId}
         * @param handler handler
         * @return GetCardResponse
         */
        public GetCardResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetCardResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public CardsCardIdGetOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public CardsCardIdGetOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public CardsCardIdGetOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public CardsCardIdGetOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public CardsCardIdGetOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String X_CLIENT_OPEN_KEY_HEADER = "X-Client-Open-Key";

        /**
         * @param xClientOpenKey (String) Открытый ключ клиента (заполняется только для получения зашифрованных PAN или CVV-кода) (optional)
         * @return operation
         */
        public CardsCardIdGetOper xClientOpenKeyHeader(String xClientOpenKey) {
            reqSpec.addHeader(X_CLIENT_OPEN_KEY_HEADER, xClientOpenKey);
            return this;
        }

        public static final String CARD_ID_PATH = "cardId";

        /**
         * @param cardId (String) Идентификатор карты (required)
         * @return operation
         */
        public CardsCardIdGetOper cardIdPath(Object cardId) {
            reqSpec.addPathParam(CARD_ID_PATH, cardId);
            return this;
        }

        public static final String BALANCE_ONLY_QUERY = "balanceOnly";

        /**
         * @param balanceOnly (Boolean) Вернуть только баланс (optional, default to false)
         * @return operation
         */
        public CardsCardIdGetOper balanceOnlyQuery(Object... balanceOnly) {
            reqSpec.addQueryParam(BALANCE_ONLY_QUERY, balanceOnly);
            return this;
        }

        public static final String ENCRYPTED_PAN_ONLY_QUERY = "encryptedPanOnly";

        /**
         * @param encryptedPanOnly (Boolean) Вернуть только зашифрованный PAN (optional, default to false)
         * @return operation
         */
        public CardsCardIdGetOper encryptedPanOnlyQuery(Object... encryptedPanOnly) {
            reqSpec.addQueryParam(ENCRYPTED_PAN_ONLY_QUERY, encryptedPanOnly);
            return this;
        }

        public static final String ENCRYPTED_CVV_ONLY_QUERY = "encryptedCvvOnly";

        /**
         * @param encryptedCvvOnly (Boolean) Вернуть только зашифрованный CVV-код (optional, default to false)
         * @return operation
         */
        public CardsCardIdGetOper encryptedCvvOnlyQuery(Object... encryptedCvvOnly) {
            reqSpec.addQueryParam(ENCRYPTED_CVV_ONLY_QUERY, encryptedCvvOnly);
            return this;
        }

        public static final String IN_APP_PROVISIONING_TOKENS_ONLY_QUERY = "inAppProvisioningTokensOnly";

        /**
         * @param inAppProvisioningTokensOnly (Boolean) Вернуть только In App Provisioning токены (optional, default to false)
         * @return operation
         */
        public CardsCardIdGetOper inAppProvisioningTokensOnlyQuery(Object... inAppProvisioningTokensOnly) {
            reqSpec.addQueryParam(IN_APP_PROVISIONING_TOKENS_ONLY_QUERY, inAppProvisioningTokensOnly);
            return this;
        }

        public static final String FIELDS_QUERY = "fields";

        /**
         * @param fields (Set&lt;String&gt;) Список возвращаемых полей из модели. maskedPan - маскированный PAN, expiryDate - дата окончания действия, paySystem - платежная система, status - статус, token - токен привязанной карты (optional)
         * @return operation
         */
        public CardsCardIdGetOper fieldsQuery(Object... fields) {
            reqSpec.addQueryParam(FIELDS_QUERY, fields);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CardsCardIdGetOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CardsCardIdGetOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Добавить карту в электронный кошелёк Apple Wallet
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #cardIdPath Идентификатор карты (required)
     * @see #xIdempotencyKeyHeader Уникальный идентификатор запроса для поддержки идемпотентности (required)
     * @see #body  (optional)
     * return CreateInAppProvisioningAppleResponse
     */
    public static class CardsCardIdInAppProvisioningApplePostOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/cards/{cardId}/in-app-provisioning-apple";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CardsCardIdInAppProvisioningApplePostOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /cards/{cardId}/in-app-provisioning-apple
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /cards/{cardId}/in-app-provisioning-apple
         * @param handler handler
         * @return CreateInAppProvisioningAppleResponse
         */
        public CreateInAppProvisioningAppleResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<CreateInAppProvisioningAppleResponse>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param createInAppProvisioningAppleRequest (CreateInAppProvisioningAppleRequest)  (optional)
         * @return operation
         */
        public CardsCardIdInAppProvisioningApplePostOper body(CreateInAppProvisioningAppleRequest createInAppProvisioningAppleRequest) {
            reqSpec.setBody(createInAppProvisioningAppleRequest);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningApplePostOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningApplePostOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningApplePostOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningApplePostOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningApplePostOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String X_IDEMPOTENCY_KEY_HEADER = "X-Idempotency-Key";

        /**
         * @param xIdempotencyKey (String) Уникальный идентификатор запроса для поддержки идемпотентности (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningApplePostOper xIdempotencyKeyHeader(String xIdempotencyKey) {
            reqSpec.addHeader(X_IDEMPOTENCY_KEY_HEADER, xIdempotencyKey);
            return this;
        }

        public static final String CARD_ID_PATH = "cardId";

        /**
         * @param cardId (String) Идентификатор карты (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningApplePostOper cardIdPath(Object cardId) {
            reqSpec.addPathParam(CARD_ID_PATH, cardId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CardsCardIdInAppProvisioningApplePostOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CardsCardIdInAppProvisioningApplePostOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Добавить карту в электронный кошелёк Google Pay
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #xIdempotencyKeyHeader Уникальный идентификатор запроса для поддержки идемпотентности (required)
     * @see #cardIdPath Идентификатор карты (required)
     * @see #body  (optional)
     * return CreateInAppProvisioningGoogleResponse
     */
    public static class CardsCardIdInAppProvisioningGooglePostOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/cards/{cardId}/in-app-provisioning-google";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CardsCardIdInAppProvisioningGooglePostOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /cards/{cardId}/in-app-provisioning-google
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /cards/{cardId}/in-app-provisioning-google
         * @param handler handler
         * @return CreateInAppProvisioningGoogleResponse
         */
        public CreateInAppProvisioningGoogleResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<CreateInAppProvisioningGoogleResponse>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param createInAppProvisioningGoogleRequest (CreateInAppProvisioningGoogleRequest)  (optional)
         * @return operation
         */
        public CardsCardIdInAppProvisioningGooglePostOper body(CreateInAppProvisioningGoogleRequest createInAppProvisioningGoogleRequest) {
            reqSpec.setBody(createInAppProvisioningGoogleRequest);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningGooglePostOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningGooglePostOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningGooglePostOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningGooglePostOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningGooglePostOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String X_IDEMPOTENCY_KEY_HEADER = "X-Idempotency-Key";

        /**
         * @param xIdempotencyKey (String) Уникальный идентификатор запроса для поддержки идемпотентности (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningGooglePostOper xIdempotencyKeyHeader(String xIdempotencyKey) {
            reqSpec.addHeader(X_IDEMPOTENCY_KEY_HEADER, xIdempotencyKey);
            return this;
        }

        public static final String CARD_ID_PATH = "cardId";

        /**
         * @param cardId (String) Идентификатор карты (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningGooglePostOper cardIdPath(Object cardId) {
            reqSpec.addPathParam(CARD_ID_PATH, cardId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CardsCardIdInAppProvisioningGooglePostOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CardsCardIdInAppProvisioningGooglePostOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Добавить карту в электронный кошелёк MirPay
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #xIdempotencyKeyHeader Уникальный идентификатор запроса для поддержки идемпотентности (required)
     * @see #cardIdPath Идентификатор карты (required)
     * @see #body  (optional)
     * return CreateInAppProvisioningMirResponse
     */
    public static class CardsCardIdInAppProvisioningMirPostOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/cards/{cardId}/in-app-provisioning-mir";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CardsCardIdInAppProvisioningMirPostOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /cards/{cardId}/in-app-provisioning-mir
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /cards/{cardId}/in-app-provisioning-mir
         * @param handler handler
         * @return CreateInAppProvisioningMirResponse
         */
        public CreateInAppProvisioningMirResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<CreateInAppProvisioningMirResponse>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param createInAppProvisioningMirRequest (CreateInAppProvisioningMirRequest)  (optional)
         * @return operation
         */
        public CardsCardIdInAppProvisioningMirPostOper body(CreateInAppProvisioningMirRequest createInAppProvisioningMirRequest) {
            reqSpec.setBody(createInAppProvisioningMirRequest);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningMirPostOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningMirPostOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningMirPostOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningMirPostOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningMirPostOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String X_IDEMPOTENCY_KEY_HEADER = "X-Idempotency-Key";

        /**
         * @param xIdempotencyKey (String) Уникальный идентификатор запроса для поддержки идемпотентности (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningMirPostOper xIdempotencyKeyHeader(String xIdempotencyKey) {
            reqSpec.addHeader(X_IDEMPOTENCY_KEY_HEADER, xIdempotencyKey);
            return this;
        }

        public static final String CARD_ID_PATH = "cardId";

        /**
         * @param cardId (String) Идентификатор карты (required)
         * @return operation
         */
        public CardsCardIdInAppProvisioningMirPostOper cardIdPath(Object cardId) {
            reqSpec.addPathParam(CARD_ID_PATH, cardId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CardsCardIdInAppProvisioningMirPostOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CardsCardIdInAppProvisioningMirPostOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить лимиты и ограничения карты по идентификатору карты
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #cardIdPath Идентификатор карты (required)
     * return GetCardLimitsResponse
     */
    public static class CardsCardIdLimitsGetOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/cards/{cardId}/limits";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CardsCardIdLimitsGetOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /cards/{cardId}/limits
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /cards/{cardId}/limits
         * @param handler handler
         * @return GetCardLimitsResponse
         */
        public GetCardLimitsResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetCardLimitsResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public CardsCardIdLimitsGetOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public CardsCardIdLimitsGetOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public CardsCardIdLimitsGetOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public CardsCardIdLimitsGetOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public CardsCardIdLimitsGetOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String CARD_ID_PATH = "cardId";

        /**
         * @param cardId (String) Идентификатор карты (required)
         * @return operation
         */
        public CardsCardIdLimitsGetOper cardIdPath(Object cardId) {
            reqSpec.addPathParam(CARD_ID_PATH, cardId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CardsCardIdLimitsGetOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CardsCardIdLimitsGetOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Установить PIN-код или заблокировать карту
     * Для блокировки карты требуется передавать значение поля status, для установки PIN-кода поля модели CardPin. Одновременная передача данных по статусу и PIN-коду приведёт к ошибке Bad Request. При успешной блокировке или установке PIN-кода возвращается статус 204 No Content. В случае, если требуется подтверждение через OTP, то код ответа будет 200 OK и возвращён объект confirmationData. Для ввода OTP необходимо повторить запрос, заполнив поля объекта confirmationData данными из sms и предшедствующего запроса.
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #cardIdPath Идентификатор карты (required)
     * @see #body  (optional)
     * return UpdateCardResponse
     */
    public static class CardsCardIdPutOper implements Oper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/cards/{cardId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CardsCardIdPutOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /cards/{cardId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PUT /cards/{cardId}
         * @param handler handler
         * @return UpdateCardResponse
         */
        public UpdateCardResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<UpdateCardResponse>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param updateCardRequest (UpdateCardRequest)  (optional)
         * @return operation
         */
        public CardsCardIdPutOper body(UpdateCardRequest updateCardRequest) {
            reqSpec.setBody(updateCardRequest);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public CardsCardIdPutOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public CardsCardIdPutOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public CardsCardIdPutOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public CardsCardIdPutOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public CardsCardIdPutOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String CARD_ID_PATH = "cardId";

        /**
         * @param cardId (String) Идентификатор карты (required)
         * @return operation
         */
        public CardsCardIdPutOper cardIdPath(Object cardId) {
            reqSpec.addPathParam(CARD_ID_PATH, cardId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CardsCardIdPutOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CardsCardIdPutOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить карты клиента
     * 
     *
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #fieldsQuery Список возвращаемых полей из модели. maskedPan - маскированный PAN, expiryDate - дата окончания действия, paySystem - платежная система, status - статус, token - токен привязанной карты (optional)
     * return GetUserCardsResponse
     */
    public static class ClientsCardsGetOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/clients/cards";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ClientsCardsGetOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /clients/cards
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /clients/cards
         * @param handler handler
         * @return GetUserCardsResponse
         */
        public GetUserCardsResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetUserCardsResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public ClientsCardsGetOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public ClientsCardsGetOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public ClientsCardsGetOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public ClientsCardsGetOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public ClientsCardsGetOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String FIELDS_QUERY = "fields";

        /**
         * @param fields (Set&lt;String&gt;) Список возвращаемых полей из модели. maskedPan - маскированный PAN, expiryDate - дата окончания действия, paySystem - платежная система, status - статус, token - токен привязанной карты (optional)
         * @return operation
         */
        public ClientsCardsGetOper fieldsQuery(Object... fields) {
            reqSpec.addQueryParam(FIELDS_QUERY, fields);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ClientsCardsGetOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ClientsCardsGetOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Установить секретное слово клиента
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #body  (optional)
     * return UpdateClientSecretWordResponse
     */
    public static class ClientsSecretWordPutOper implements Oper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/clients/secret-word";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ClientsSecretWordPutOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /clients/secret-word
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PUT /clients/secret-word
         * @param handler handler
         * @return UpdateClientSecretWordResponse
         */
        public UpdateClientSecretWordResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<UpdateClientSecretWordResponse>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param updateClientSecretWordRequest (UpdateClientSecretWordRequest)  (optional)
         * @return operation
         */
        public ClientsSecretWordPutOper body(UpdateClientSecretWordRequest updateClientSecretWordRequest) {
            reqSpec.setBody(updateClientSecretWordRequest);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public ClientsSecretWordPutOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public ClientsSecretWordPutOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public ClientsSecretWordPutOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public ClientsSecretWordPutOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public ClientsSecretWordPutOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ClientsSecretWordPutOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ClientsSecretWordPutOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Исполнить платёж в пользу поставщика услуги
     * Метод вызывается без тела запроса. При успешном исполнении платежа возвращается статус 204 No Content. В случае, если требуется подтверждение через OTP, то код ответа будет 200 OK и возвращён объект confirmationData. Для ввода OTP необходимо повторить запрос, передав тело запроса с заполненными полями объекта confirmationData данными из SMS и предшедствующего запроса.
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #paymentIdPath Идентификатор платежа (required)
     * @see #vendorTypeQuery Тип поставщика услуги (required)
     * @see #body  (optional)
     * return UpdateVendorPaymentResponse
     */
    public static class ConfirmPaymentVendorOper implements Oper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/vendor-payments/{paymentId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ConfirmPaymentVendorOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /vendor-payments/{paymentId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PUT /vendor-payments/{paymentId}
         * @param handler handler
         * @return UpdateVendorPaymentResponse
         */
        public UpdateVendorPaymentResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<UpdateVendorPaymentResponse>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param updateVendorPaymentRequest (UpdateVendorPaymentRequest)  (optional)
         * @return operation
         */
        public ConfirmPaymentVendorOper body(UpdateVendorPaymentRequest updateVendorPaymentRequest) {
            reqSpec.setBody(updateVendorPaymentRequest);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public ConfirmPaymentVendorOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public ConfirmPaymentVendorOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public ConfirmPaymentVendorOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public ConfirmPaymentVendorOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public ConfirmPaymentVendorOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String PAYMENT_ID_PATH = "paymentId";

        /**
         * @param paymentId (String) Идентификатор платежа (required)
         * @return operation
         */
        public ConfirmPaymentVendorOper paymentIdPath(Object paymentId) {
            reqSpec.addPathParam(PAYMENT_ID_PATH, paymentId);
            return this;
        }

        public static final String VENDOR_TYPE_QUERY = "vendorType";

        /**
         * @param vendorType (String) Тип поставщика услуги (required)
         * @return operation
         */
        public ConfirmPaymentVendorOper vendorTypeQuery(Object... vendorType) {
            reqSpec.addQueryParam(VENDOR_TYPE_QUERY, vendorType);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ConfirmPaymentVendorOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ConfirmPaymentVendorOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Исполнить QR платеж
     * 
     *
     * @see #xPartnerAuthenticationHeader Токен авторизации (в формате Bearer {jwt token}) (required)
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #paymentIdPath Идентификатор платежа (required)
     * @see #body Request Body (required)
     * return ConfirmQRPaymentResponse
     */
    public static class ConfirmQRPaymentOper implements Oper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/qr-payments/{paymentId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ConfirmQRPaymentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /qr-payments/{paymentId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PUT /qr-payments/{paymentId}
         * @param handler handler
         * @return ConfirmQRPaymentResponse
         */
        public ConfirmQRPaymentResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<ConfirmQRPaymentResponse>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param confirmQRPaymentRequest (ConfirmQRPaymentRequest) Request Body (required)
         * @return operation
         */
        public ConfirmQRPaymentOper body(ConfirmQRPaymentRequest confirmQRPaymentRequest) {
            reqSpec.setBody(confirmQRPaymentRequest);
            return this;
        }

        public static final String X_PARTNER_AUTHENTICATION_HEADER = "X-Partner-Authentication";

        /**
         * @param xPartnerAuthentication (String) Токен авторизации (в формате Bearer {jwt token}) (required)
         * @return operation
         */
        public ConfirmQRPaymentOper xPartnerAuthenticationHeader(String xPartnerAuthentication) {
            reqSpec.addHeader(X_PARTNER_AUTHENTICATION_HEADER, xPartnerAuthentication);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public ConfirmQRPaymentOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public ConfirmQRPaymentOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public ConfirmQRPaymentOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public ConfirmQRPaymentOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String PAYMENT_ID_PATH = "paymentId";

        /**
         * @param paymentId (String) Идентификатор платежа (required)
         * @return operation
         */
        public ConfirmQRPaymentOper paymentIdPath(Object paymentId) {
            reqSpec.addPathParam(PAYMENT_ID_PATH, paymentId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public ConfirmQRPaymentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public ConfirmQRPaymentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Зарегистрировать платеж в пользу поставщика услуги
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #vendorTypeQuery Тип поставщика услуги (required)
     * @see #body Request Body (required)
     * return CreateVendorPaymentResponse
     */
    public static class CreatePaymentVendorOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/vendor-payments";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreatePaymentVendorOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /vendor-payments
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /vendor-payments
         * @param handler handler
         * @return CreateVendorPaymentResponse
         */
        public CreateVendorPaymentResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<CreateVendorPaymentResponse>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param createVendorPaymentRequest (CreateVendorPaymentRequest) Request Body (required)
         * @return operation
         */
        public CreatePaymentVendorOper body(CreateVendorPaymentRequest createVendorPaymentRequest) {
            reqSpec.setBody(createVendorPaymentRequest);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public CreatePaymentVendorOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public CreatePaymentVendorOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public CreatePaymentVendorOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public CreatePaymentVendorOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public CreatePaymentVendorOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String VENDOR_TYPE_QUERY = "vendorType";

        /**
         * @param vendorType (String) Тип поставщика услуги (required)
         * @return operation
         */
        public CreatePaymentVendorOper vendorTypeQuery(Object... vendorType) {
            reqSpec.addQueryParam(VENDOR_TYPE_QUERY, vendorType);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreatePaymentVendorOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreatePaymentVendorOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Зарегистрировать QR платеж
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xPartnerAuthenticationHeader Токен авторизации (в формате Bearer {jwt token}) (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xIdempotencyKeyHeader Уникальный идентификатор запроса для поддержки идемпотентности (required)
     * @see #body Request Body (required)
     * return CreateQRPaymentResponse
     */
    public static class CreateQRPaymentOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/qr-payments";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateQRPaymentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /qr-payments
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /qr-payments
         * @param handler handler
         * @return CreateQRPaymentResponse
         */
        public CreateQRPaymentResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<CreateQRPaymentResponse>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param createQRPaymentRequest (CreateQRPaymentRequest) Request Body (required)
         * @return operation
         */
        public CreateQRPaymentOper body(CreateQRPaymentRequest createQRPaymentRequest) {
            reqSpec.setBody(createQRPaymentRequest);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public CreateQRPaymentOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public CreateQRPaymentOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_PARTNER_AUTHENTICATION_HEADER = "X-Partner-Authentication";

        /**
         * @param xPartnerAuthentication (String) Токен авторизации (в формате Bearer {jwt token}) (required)
         * @return operation
         */
        public CreateQRPaymentOper xPartnerAuthenticationHeader(String xPartnerAuthentication) {
            reqSpec.addHeader(X_PARTNER_AUTHENTICATION_HEADER, xPartnerAuthentication);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public CreateQRPaymentOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public CreateQRPaymentOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_IDEMPOTENCY_KEY_HEADER = "X-Idempotency-Key";

        /**
         * @param xIdempotencyKey (String) Уникальный идентификатор запроса для поддержки идемпотентности (required)
         * @return operation
         */
        public CreateQRPaymentOper xIdempotencyKeyHeader(String xIdempotencyKey) {
            reqSpec.addHeader(X_IDEMPOTENCY_KEY_HEADER, xIdempotencyKey);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateQRPaymentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateQRPaymentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Запросить возврат по QR платежу
     * 
     *
     * @see #xPartnerAuthenticationHeader Токен авторизации (в формате Bearer {jwt token}) (required)
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xIdempotencyKeyHeader Уникальный идентификатор запроса для поддержки идемпотентности (required)
     * @see #body Request Body (required)
     * return CreateRefundResponse
     */
    public static class CreateRefundOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/refunds";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateRefundOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /refunds
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /refunds
         * @param handler handler
         * @return CreateRefundResponse
         */
        public CreateRefundResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<CreateRefundResponse>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param createRefundRequest (CreateRefundRequest) Request Body (required)
         * @return operation
         */
        public CreateRefundOper body(CreateRefundRequest createRefundRequest) {
            reqSpec.setBody(createRefundRequest);
            return this;
        }

        public static final String X_PARTNER_AUTHENTICATION_HEADER = "X-Partner-Authentication";

        /**
         * @param xPartnerAuthentication (String) Токен авторизации (в формате Bearer {jwt token}) (required)
         * @return operation
         */
        public CreateRefundOper xPartnerAuthenticationHeader(String xPartnerAuthentication) {
            reqSpec.addHeader(X_PARTNER_AUTHENTICATION_HEADER, xPartnerAuthentication);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public CreateRefundOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public CreateRefundOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public CreateRefundOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public CreateRefundOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_IDEMPOTENCY_KEY_HEADER = "X-Idempotency-Key";

        /**
         * @param xIdempotencyKey (String) Уникальный идентификатор запроса для поддержки идемпотентности (required)
         * @return operation
         */
        public CreateRefundOper xIdempotencyKeyHeader(String xIdempotencyKey) {
            reqSpec.addHeader(X_IDEMPOTENCY_KEY_HEADER, xIdempotencyKey);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateRefundOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateRefundOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Провести упрощённую идентификацию клиента через СМЭВ
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #body  (optional)
     */
    public static class CreateUpridSmevOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/uprids/uprid-smev";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateUpridSmevOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /uprids/uprid-smev
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param upridSmevRequest (UpridSmevRequest)  (optional)
         * @return operation
         */
        public CreateUpridSmevOper body(UpridSmevRequest upridSmevRequest) {
            reqSpec.setBody(upridSmevRequest);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public CreateUpridSmevOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public CreateUpridSmevOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public CreateUpridSmevOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public CreateUpridSmevOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public CreateUpridSmevOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public CreateUpridSmevOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public CreateUpridSmevOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Удалить привязанную внешнюю карту
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #cardTokenPath Токен привязанной карты (required)
     */
    public static class DeleteBindedExternalCardOper implements Oper {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/clients/binded-external-cards/{cardToken}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteBindedExternalCardOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /clients/binded-external-cards/{cardToken}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public DeleteBindedExternalCardOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public DeleteBindedExternalCardOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public DeleteBindedExternalCardOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public DeleteBindedExternalCardOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public DeleteBindedExternalCardOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String CARD_TOKEN_PATH = "cardToken";

        /**
         * @param cardToken (String) Токен привязанной карты (required)
         * @return operation
         */
        public DeleteBindedExternalCardOper cardTokenPath(Object cardToken) {
            reqSpec.addPathParam(CARD_TOKEN_PATH, cardToken);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public DeleteBindedExternalCardOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public DeleteBindedExternalCardOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получение текста согласий
     * Получение текста согласий с Персональными Данными, с Правилами пользования, с УПРИД
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #typeAgreementHeader Тип согласия (required)
     * return GetRegAgreements
     */
    public static class GetAgreementsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/clients/agreements";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAgreementsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /clients/agreements
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /clients/agreements
         * @param handler handler
         * @return GetRegAgreements
         */
        public GetRegAgreements executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetRegAgreements>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetAgreementsOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetAgreementsOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetAgreementsOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetAgreementsOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String TYPE_AGREEMENT_HEADER = "typeAgreement";

        /**
         * @param typeAgreement (String) Тип согласия (required)
         * @return operation
         */
        public GetAgreementsOper typeAgreementHeader(String typeAgreement) {
            reqSpec.addHeader(TYPE_AGREEMENT_HEADER, typeAgreement);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAgreementsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAgreementsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить список ближайших банкоматов с детальной информацией
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #latitudeQuery Географическая широта центральной точки (в десятичных градусах) (required)
     * @see #longitudeQuery Географическая долгота центральной точки (в десятичных градусах) (required)
     * @see #radiusQuery Радиус поиска банкомата (в километрах) (required)
     * @see #chargeEurQuery Внести наличные (евро) (optional)
     * @see #chargeRubQuery Внести наличные  (рубли) (optional)
     * @see #chargeUsdQuery Внести наличные (доллары) (optional)
     * @see #nfcForAllDevicesQuery Бесконтактное обслуживание по всем устройствам (optional)
     * @see #nfcMetroQuery Можно пополнить карту Метро (optional)
     * @see #qrCashQuery Снятие по QR (optional)
     * @see #qrReadQuery Платежи по QR (optional)
     * @see #visuallyImpairedQuery Для слабовидящих клиентов (optional)
     * @see #wheelchairQuery Оснащенность пандусом или поручнем (optional)
     * @see #withdrawEurQuery Получить евро (optional)
     * @see #withdrawRubQuery Получить рубли (optional)
     * @see #withdrawUsdQuery Получить доллары (optional)
     * return AtmDetailedInfosResponse
     */
    public static class GetAtmsFilteredListOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/atms/atm-detailed-infos";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAtmsFilteredListOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /atms/atm-detailed-infos
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /atms/atm-detailed-infos
         * @param handler handler
         * @return AtmDetailedInfosResponse
         */
        public AtmDetailedInfosResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<AtmDetailedInfosResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetAtmsFilteredListOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetAtmsFilteredListOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetAtmsFilteredListOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetAtmsFilteredListOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String LATITUDE_QUERY = "latitude";

        /**
         * @param latitude (Double) Географическая широта центральной точки (в десятичных градусах) (required)
         * @return operation
         */
        public GetAtmsFilteredListOper latitudeQuery(Object... latitude) {
            reqSpec.addQueryParam(LATITUDE_QUERY, latitude);
            return this;
        }

        public static final String LONGITUDE_QUERY = "longitude";

        /**
         * @param longitude (Double) Географическая долгота центральной точки (в десятичных градусах) (required)
         * @return operation
         */
        public GetAtmsFilteredListOper longitudeQuery(Object... longitude) {
            reqSpec.addQueryParam(LONGITUDE_QUERY, longitude);
            return this;
        }

        public static final String RADIUS_QUERY = "radius";

        /**
         * @param radius (Double) Радиус поиска банкомата (в километрах) (required)
         * @return operation
         */
        public GetAtmsFilteredListOper radiusQuery(Object... radius) {
            reqSpec.addQueryParam(RADIUS_QUERY, radius);
            return this;
        }

        public static final String CHARGE_EUR_QUERY = "chargeEur";

        /**
         * @param chargeEur (Boolean) Внести наличные (евро) (optional)
         * @return operation
         */
        public GetAtmsFilteredListOper chargeEurQuery(Object... chargeEur) {
            reqSpec.addQueryParam(CHARGE_EUR_QUERY, chargeEur);
            return this;
        }

        public static final String CHARGE_RUB_QUERY = "chargeRub";

        /**
         * @param chargeRub (Boolean) Внести наличные  (рубли) (optional)
         * @return operation
         */
        public GetAtmsFilteredListOper chargeRubQuery(Object... chargeRub) {
            reqSpec.addQueryParam(CHARGE_RUB_QUERY, chargeRub);
            return this;
        }

        public static final String CHARGE_USD_QUERY = "chargeUsd";

        /**
         * @param chargeUsd (Boolean) Внести наличные (доллары) (optional)
         * @return operation
         */
        public GetAtmsFilteredListOper chargeUsdQuery(Object... chargeUsd) {
            reqSpec.addQueryParam(CHARGE_USD_QUERY, chargeUsd);
            return this;
        }

        public static final String NFC_FOR_ALL_DEVICES_QUERY = "nfcForAllDevices";

        /**
         * @param nfcForAllDevices (Boolean) Бесконтактное обслуживание по всем устройствам (optional)
         * @return operation
         */
        public GetAtmsFilteredListOper nfcForAllDevicesQuery(Object... nfcForAllDevices) {
            reqSpec.addQueryParam(NFC_FOR_ALL_DEVICES_QUERY, nfcForAllDevices);
            return this;
        }

        public static final String NFC_METRO_QUERY = "nfcMetro";

        /**
         * @param nfcMetro (Boolean) Можно пополнить карту Метро (optional)
         * @return operation
         */
        public GetAtmsFilteredListOper nfcMetroQuery(Object... nfcMetro) {
            reqSpec.addQueryParam(NFC_METRO_QUERY, nfcMetro);
            return this;
        }

        public static final String OWNER_BANK_QUERY = "ownerBank";

        /**
         * @return operation
         */
        public GetAtmsFilteredListOper ownerBankQuery(Object... ownerBank) {
            reqSpec.addQueryParam(OWNER_BANK_QUERY, ownerBank);
            return this;
        }

        public static final String QR_CASH_QUERY = "qrCash";

        /**
         * @param qrCash (Boolean) Снятие по QR (optional)
         * @return operation
         */
        public GetAtmsFilteredListOper qrCashQuery(Object... qrCash) {
            reqSpec.addQueryParam(QR_CASH_QUERY, qrCash);
            return this;
        }

        public static final String QR_READ_QUERY = "qrRead";

        /**
         * @param qrRead (Boolean) Платежи по QR (optional)
         * @return operation
         */
        public GetAtmsFilteredListOper qrReadQuery(Object... qrRead) {
            reqSpec.addQueryParam(QR_READ_QUERY, qrRead);
            return this;
        }

        public static final String VISUALLY_IMPAIRED_QUERY = "visuallyImpaired";

        /**
         * @param visuallyImpaired (Boolean) Для слабовидящих клиентов (optional)
         * @return operation
         */
        public GetAtmsFilteredListOper visuallyImpairedQuery(Object... visuallyImpaired) {
            reqSpec.addQueryParam(VISUALLY_IMPAIRED_QUERY, visuallyImpaired);
            return this;
        }

        public static final String WHEELCHAIR_QUERY = "wheelchair";

        /**
         * @param wheelchair (Boolean) Оснащенность пандусом или поручнем (optional)
         * @return operation
         */
        public GetAtmsFilteredListOper wheelchairQuery(Object... wheelchair) {
            reqSpec.addQueryParam(WHEELCHAIR_QUERY, wheelchair);
            return this;
        }

        public static final String WITHDRAW_EUR_QUERY = "withdrawEur";

        /**
         * @param withdrawEur (Boolean) Получить евро (optional)
         * @return operation
         */
        public GetAtmsFilteredListOper withdrawEurQuery(Object... withdrawEur) {
            reqSpec.addQueryParam(WITHDRAW_EUR_QUERY, withdrawEur);
            return this;
        }

        public static final String WITHDRAW_RUB_QUERY = "withdrawRub";

        /**
         * @param withdrawRub (Boolean) Получить рубли (optional)
         * @return operation
         */
        public GetAtmsFilteredListOper withdrawRubQuery(Object... withdrawRub) {
            reqSpec.addQueryParam(WITHDRAW_RUB_QUERY, withdrawRub);
            return this;
        }

        public static final String WITHDRAW_USD_QUERY = "withdrawUsd";

        /**
         * @param withdrawUsd (Boolean) Получить доллары (optional)
         * @return operation
         */
        public GetAtmsFilteredListOper withdrawUsdQuery(Object... withdrawUsd) {
            reqSpec.addQueryParam(WITHDRAW_USD_QUERY, withdrawUsd);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAtmsFilteredListOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAtmsFilteredListOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить список ближайших банкоматов с минимальной информацией
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #latitudeQuery Географическая широта центральной точки (в десятичных градусах) (required)
     * @see #longitudeQuery Географическая долгота центральной точки (в десятичных градусах) (required)
     * @see #radiusQuery Радиус поиска банкомата (в километрах) (required)
     * return AtmShortInfosResponse
     */
    public static class GetAtmsListOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/atms/atm-short-infos";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetAtmsListOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /atms/atm-short-infos
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /atms/atm-short-infos
         * @param handler handler
         * @return AtmShortInfosResponse
         */
        public AtmShortInfosResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<AtmShortInfosResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetAtmsListOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetAtmsListOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetAtmsListOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetAtmsListOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String LATITUDE_QUERY = "latitude";

        /**
         * @param latitude (Double) Географическая широта центральной точки (в десятичных градусах) (required)
         * @return operation
         */
        public GetAtmsListOper latitudeQuery(Object... latitude) {
            reqSpec.addQueryParam(LATITUDE_QUERY, latitude);
            return this;
        }

        public static final String LONGITUDE_QUERY = "longitude";

        /**
         * @param longitude (Double) Географическая долгота центральной точки (в десятичных градусах) (required)
         * @return operation
         */
        public GetAtmsListOper longitudeQuery(Object... longitude) {
            reqSpec.addQueryParam(LONGITUDE_QUERY, longitude);
            return this;
        }

        public static final String RADIUS_QUERY = "radius";

        /**
         * @param radius (Double) Радиус поиска банкомата (в километрах) (required)
         * @return operation
         */
        public GetAtmsListOper radiusQuery(Object... radius) {
            reqSpec.addQueryParam(RADIUS_QUERY, radius);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetAtmsListOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetAtmsListOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить список привязанных внешних карт
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * return BindedExternalCardsResponse
     */
    public static class GetBindedExternalCardsOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/clients/binded-external-cards";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetBindedExternalCardsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /clients/binded-external-cards
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /clients/binded-external-cards
         * @param handler handler
         * @return BindedExternalCardsResponse
         */
        public BindedExternalCardsResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<BindedExternalCardsResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetBindedExternalCardsOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetBindedExternalCardsOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetBindedExternalCardsOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetBindedExternalCardsOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public GetBindedExternalCardsOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetBindedExternalCardsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetBindedExternalCardsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить комиссию по переводу с карты на карту
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #amountQuery Сумма перевода в рублях (RUB) (required)
     * @see #senderPanQuery PAN карты отправителя (optional)
     * @see #senderCardTokenQuery Токен привязанной карты отправителя (optional)
     * @see #recipientPanQuery PAN карты получателя (optional)
     * @see #recipientCardTokenQuery Токен привязанной карты получателя (optional)
     * return Card2CardTransferCommissionResponse
     */
    public static class GetCard2CardTransferComissionOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/transfers/card2card-transfers/commission";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetCard2CardTransferComissionOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /transfers/card2card-transfers/commission
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /transfers/card2card-transfers/commission
         * @param handler handler
         * @return Card2CardTransferCommissionResponse
         */
        public Card2CardTransferCommissionResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<Card2CardTransferCommissionResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetCard2CardTransferComissionOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetCard2CardTransferComissionOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetCard2CardTransferComissionOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetCard2CardTransferComissionOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public GetCard2CardTransferComissionOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String AMOUNT_QUERY = "amount";

        /**
         * @param amount (Integer) Сумма перевода в рублях (RUB) (required)
         * @return operation
         */
        public GetCard2CardTransferComissionOper amountQuery(Object... amount) {
            reqSpec.addQueryParam(AMOUNT_QUERY, amount);
            return this;
        }

        public static final String SENDER_PAN_QUERY = "senderPan";

        /**
         * @param senderPan (String) PAN карты отправителя (optional)
         * @return operation
         */
        public GetCard2CardTransferComissionOper senderPanQuery(Object... senderPan) {
            reqSpec.addQueryParam(SENDER_PAN_QUERY, senderPan);
            return this;
        }

        public static final String SENDER_CARD_TOKEN_QUERY = "senderCardToken";

        /**
         * @param senderCardToken (String) Токен привязанной карты отправителя (optional)
         * @return operation
         */
        public GetCard2CardTransferComissionOper senderCardTokenQuery(Object... senderCardToken) {
            reqSpec.addQueryParam(SENDER_CARD_TOKEN_QUERY, senderCardToken);
            return this;
        }

        public static final String RECIPIENT_PAN_QUERY = "recipientPan";

        /**
         * @param recipientPan (String) PAN карты получателя (optional)
         * @return operation
         */
        public GetCard2CardTransferComissionOper recipientPanQuery(Object... recipientPan) {
            reqSpec.addQueryParam(RECIPIENT_PAN_QUERY, recipientPan);
            return this;
        }

        public static final String RECIPIENT_CARD_TOKEN_QUERY = "recipientCardToken";

        /**
         * @param recipientCardToken (String) Токен привязанной карты получателя (optional)
         * @return operation
         */
        public GetCard2CardTransferComissionOper recipientCardTokenQuery(Object... recipientCardToken) {
            reqSpec.addQueryParam(RECIPIENT_CARD_TOKEN_QUERY, recipientCardToken);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetCard2CardTransferComissionOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetCard2CardTransferComissionOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Сгенерировать публичный ключ для шифрования данных клиента для регистрации
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * return GetClientRegistrationPublicKeyResponse
     */
    public static class GetClientRegistrationPublicKeyOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/clients/registration/public-key";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetClientRegistrationPublicKeyOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /clients/registration/public-key
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /clients/registration/public-key
         * @param handler handler
         * @return GetClientRegistrationPublicKeyResponse
         */
        public GetClientRegistrationPublicKeyResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetClientRegistrationPublicKeyResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetClientRegistrationPublicKeyOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetClientRegistrationPublicKeyOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetClientRegistrationPublicKeyOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetClientRegistrationPublicKeyOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetClientRegistrationPublicKeyOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetClientRegistrationPublicKeyOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить информацию о платеже в пользу поставщика услуги
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #paymentIdPath Идентификатор платежа (required)
     * @see #vendorTypeQuery Тип поставщика услуги (required)
     * return GetVendorPaymentResponse
     */
    public static class GetPaymentVendorOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/vendor-payments/{paymentId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetPaymentVendorOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /vendor-payments/{paymentId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /vendor-payments/{paymentId}
         * @param handler handler
         * @return GetVendorPaymentResponse
         */
        public GetVendorPaymentResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetVendorPaymentResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetPaymentVendorOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetPaymentVendorOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetPaymentVendorOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetPaymentVendorOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public GetPaymentVendorOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String PAYMENT_ID_PATH = "paymentId";

        /**
         * @param paymentId (String) Идентификатор платежа (required)
         * @return operation
         */
        public GetPaymentVendorOper paymentIdPath(Object paymentId) {
            reqSpec.addPathParam(PAYMENT_ID_PATH, paymentId);
            return this;
        }

        public static final String VENDOR_TYPE_QUERY = "vendorType";

        /**
         * @param vendorType (String) Тип поставщика услуги (required)
         * @return operation
         */
        public GetPaymentVendorOper vendorTypeQuery(Object... vendorType) {
            reqSpec.addQueryParam(VENDOR_TYPE_QUERY, vendorType);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetPaymentVendorOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetPaymentVendorOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Сгенерировать публичный ключ для шифрования данных по карте (PIN-код)
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #xIdempotencyKeyHeader Уникальный идентификатор запроса для поддержки идемпотентности (required)
     * return GetCardsPublicKeyResponse
     */
    public static class GetPublicKeyOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/cards/public-key";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetPublicKeyOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /cards/public-key
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /cards/public-key
         * @param handler handler
         * @return GetCardsPublicKeyResponse
         */
        public GetCardsPublicKeyResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetCardsPublicKeyResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetPublicKeyOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetPublicKeyOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetPublicKeyOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetPublicKeyOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public GetPublicKeyOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String X_IDEMPOTENCY_KEY_HEADER = "X-Idempotency-Key";

        /**
         * @param xIdempotencyKey (String) Уникальный идентификатор запроса для поддержки идемпотентности (required)
         * @return operation
         */
        public GetPublicKeyOper xIdempotencyKeyHeader(String xIdempotencyKey) {
            reqSpec.addHeader(X_IDEMPOTENCY_KEY_HEADER, xIdempotencyKey);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetPublicKeyOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetPublicKeyOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить информацию о QR платеже
     * 
     *
     * @see #xPartnerAuthenticationHeader Токен авторизации (в формате Bearer {jwt token}) (required)
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #paymentIdPath Идентификатор платежа (required)
     * return GetQRPaymentResponse
     */
    public static class GetQRPaymentOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/qr-payments/{paymentId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetQRPaymentOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /qr-payments/{paymentId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /qr-payments/{paymentId}
         * @param handler handler
         * @return GetQRPaymentResponse
         */
        public GetQRPaymentResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetQRPaymentResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String X_PARTNER_AUTHENTICATION_HEADER = "X-Partner-Authentication";

        /**
         * @param xPartnerAuthentication (String) Токен авторизации (в формате Bearer {jwt token}) (required)
         * @return operation
         */
        public GetQRPaymentOper xPartnerAuthenticationHeader(String xPartnerAuthentication) {
            reqSpec.addHeader(X_PARTNER_AUTHENTICATION_HEADER, xPartnerAuthentication);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetQRPaymentOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetQRPaymentOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetQRPaymentOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetQRPaymentOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String PAYMENT_ID_PATH = "paymentId";

        /**
         * @param paymentId (String) Идентификатор платежа (required)
         * @return operation
         */
        public GetQRPaymentOper paymentIdPath(Object paymentId) {
            reqSpec.addPathParam(PAYMENT_ID_PATH, paymentId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetQRPaymentOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetQRPaymentOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить информацию о возврате по QR платежу
     * 
     *
     * @see #xPartnerAuthenticationHeader Токен авторизации (в формате Bearer {jwt token}) (required)
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #refundIdPath Идентификатор возврата, сформированный на стороне Банка (required)
     * return GetRefundResponse
     */
    public static class GetRefundOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/refunds/{refundId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetRefundOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /refunds/{refundId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /refunds/{refundId}
         * @param handler handler
         * @return GetRefundResponse
         */
        public GetRefundResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetRefundResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String X_PARTNER_AUTHENTICATION_HEADER = "X-Partner-Authentication";

        /**
         * @param xPartnerAuthentication (String) Токен авторизации (в формате Bearer {jwt token}) (required)
         * @return operation
         */
        public GetRefundOper xPartnerAuthenticationHeader(String xPartnerAuthentication) {
            reqSpec.addHeader(X_PARTNER_AUTHENTICATION_HEADER, xPartnerAuthentication);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetRefundOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetRefundOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetRefundOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetRefundOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String REFUND_ID_PATH = "refundId";

        /**
         * @param refundId (String) Идентификатор возврата, сформированный на стороне Банка (required)
         * @return operation
         */
        public GetRefundOper refundIdPath(Object refundId) {
            reqSpec.addPathParam(REFUND_ID_PATH, refundId);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetRefundOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetRefundOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Сгенерировать публичный ключ для шифрования секретного слова клиента
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #xIdempotencyKeyHeader Уникальный идентификатор запроса для поддержки идемпотентности (required)
     * return GetSecretWordPublicKeyResponse
     */
    public static class GetSecretWordPublicKeyOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/clients/secret-words/public-key";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetSecretWordPublicKeyOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /clients/secret-words/public-key
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /clients/secret-words/public-key
         * @param handler handler
         * @return GetSecretWordPublicKeyResponse
         */
        public GetSecretWordPublicKeyResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetSecretWordPublicKeyResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetSecretWordPublicKeyOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetSecretWordPublicKeyOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetSecretWordPublicKeyOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetSecretWordPublicKeyOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public GetSecretWordPublicKeyOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String X_IDEMPOTENCY_KEY_HEADER = "X-Idempotency-Key";

        /**
         * @param xIdempotencyKey (String) Уникальный идентификатор запроса для поддержки идемпотентности (required)
         * @return operation
         */
        public GetSecretWordPublicKeyOper xIdempotencyKeyHeader(String xIdempotencyKey) {
            reqSpec.addHeader(X_IDEMPOTENCY_KEY_HEADER, xIdempotencyKey);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetSecretWordPublicKeyOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetSecretWordPublicKeyOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить статус по упрощённой идентификации клиента
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * return GetUpridResponse
     */
    public static class GetUpridOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/uprids";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetUpridOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /uprids
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /uprids
         * @param handler handler
         * @return GetUpridResponse
         */
        public GetUpridResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetUpridResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetUpridOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetUpridOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetUpridOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public GetUpridOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetUpridOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetUpridOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetUpridOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить ссылку для прохождения упрощённой идентификации клиента через ЕСИА
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * return GetUpridAuthEsiaLinkResponse
     */
    public static class GetUpridAuthEsiaLinkResponseOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/uprids/auth-esia-link";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetUpridAuthEsiaLinkResponseOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /uprids/auth-esia-link
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /uprids/auth-esia-link
         * @param handler handler
         * @return GetUpridAuthEsiaLinkResponse
         */
        public GetUpridAuthEsiaLinkResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetUpridAuthEsiaLinkResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetUpridAuthEsiaLinkResponseOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetUpridAuthEsiaLinkResponseOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetUpridAuthEsiaLinkResponseOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public GetUpridAuthEsiaLinkResponseOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetUpridAuthEsiaLinkResponseOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetUpridAuthEsiaLinkResponseOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetUpridAuthEsiaLinkResponseOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить список категорий поставщиков услуг
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * return VendorCategoriesResponse
     */
    public static class GetVendorCategoriesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/vendor-categories";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetVendorCategoriesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /vendor-categories
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /vendor-categories
         * @param handler handler
         * @return VendorCategoriesResponse
         */
        public VendorCategoriesResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<VendorCategoriesResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetVendorCategoriesOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetVendorCategoriesOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetVendorCategoriesOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetVendorCategoriesOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public GetVendorCategoriesOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetVendorCategoriesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetVendorCategoriesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить поля поставщика услуг для оплаты услуги
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #vendorTypeQuery Тип поставщика услуги (required)
     * @see #vendorIdPath Идентификатор поставщика услуги (required)
     * return VendorPaymentDataResponse
     */
    public static class GetVendorPaymentDataOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/vendor-categories/vendors/{vendorId}/vendor-payment-data";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetVendorPaymentDataOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /vendor-categories/vendors/{vendorId}/vendor-payment-data
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /vendor-categories/vendors/{vendorId}/vendor-payment-data
         * @param handler handler
         * @return VendorPaymentDataResponse
         */
        public VendorPaymentDataResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<VendorPaymentDataResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetVendorPaymentDataOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetVendorPaymentDataOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetVendorPaymentDataOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetVendorPaymentDataOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public GetVendorPaymentDataOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String VENDOR_ID_PATH = "vendorId";

        /**
         * @param vendorId (String) Идентификатор поставщика услуги (required)
         * @return operation
         */
        public GetVendorPaymentDataOper vendorIdPath(Object vendorId) {
            reqSpec.addPathParam(VENDOR_ID_PATH, vendorId);
            return this;
        }

        public static final String VENDOR_TYPE_QUERY = "vendorType";

        /**
         * @param vendorType (String) Тип поставщика услуги (required)
         * @return operation
         */
        public GetVendorPaymentDataOper vendorTypeQuery(Object... vendorType) {
            reqSpec.addQueryParam(VENDOR_TYPE_QUERY, vendorType);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetVendorPaymentDataOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetVendorPaymentDataOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить список поставщиков услуг для категории
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #vendorCategoryIdPath Идентификатор категории поставщиков услуг (required)
     * @see #pageNumberQuery Номер страницы результата (нумерация с 0) (required)
     * @see #pageSizeQuery Размер страницы результата (максимум 20) (required)
     * return VendorCategoryVendorsResponse
     */
    public static class GetVerdorCategoriesOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/vendor-categories/{vendorCategoryId}/vendors";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetVerdorCategoriesOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /vendor-categories/{vendorCategoryId}/vendors
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /vendor-categories/{vendorCategoryId}/vendors
         * @param handler handler
         * @return VendorCategoryVendorsResponse
         */
        public VendorCategoryVendorsResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<VendorCategoryVendorsResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public GetVerdorCategoriesOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public GetVerdorCategoriesOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public GetVerdorCategoriesOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public GetVerdorCategoriesOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public GetVerdorCategoriesOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String VENDOR_CATEGORY_ID_PATH = "vendorCategoryId";

        /**
         * @param vendorCategoryId (String) Идентификатор категории поставщиков услуг (required)
         * @return operation
         */
        public GetVerdorCategoriesOper vendorCategoryIdPath(Object vendorCategoryId) {
            reqSpec.addPathParam(VENDOR_CATEGORY_ID_PATH, vendorCategoryId);
            return this;
        }

        public static final String PAGE_NUMBER_QUERY = "pageNumber";

        /**
         * @param pageNumber (Integer) Номер страницы результата (нумерация с 0) (required)
         * @return operation
         */
        public GetVerdorCategoriesOper pageNumberQuery(Object... pageNumber) {
            reqSpec.addQueryParam(PAGE_NUMBER_QUERY, pageNumber);
            return this;
        }

        public static final String PAGE_SIZE_QUERY = "pageSize";

        /**
         * @param pageSize (Integer) Размер страницы результата (максимум 20) (required)
         * @return operation
         */
        public GetVerdorCategoriesOper pageSizeQuery(Object... pageSize) {
            reqSpec.addQueryParam(PAGE_SIZE_QUERY, pageSize);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public GetVerdorCategoriesOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public GetVerdorCategoriesOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Сохранение согласий
     * 
     *
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #body  (required)
     */
    public static class SaveAgreementsOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/clients/agreements";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SaveAgreementsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /clients/agreements
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param saveAgreementsRequest (SaveAgreementsRequest)  (required)
         * @return operation
         */
        public SaveAgreementsOper body(SaveAgreementsRequest saveAgreementsRequest) {
            reqSpec.setBody(saveAgreementsRequest);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public SaveAgreementsOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public SaveAgreementsOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public SaveAgreementsOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public SaveAgreementsOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public SaveAgreementsOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SaveAgreementsOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SaveAgreementsOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Выполнить поиск клиента по номеру телефона
     * 
     *
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #phoneNumberQuery Номер телефона клиента (required)
     * return GetClientByPhoneResponse
     */
    public static class SearchClientOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/clients";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SearchClientOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /clients
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /clients
         * @param handler handler
         * @return GetClientByPhoneResponse
         */
        public GetClientByPhoneResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetClientByPhoneResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public SearchClientOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public SearchClientOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public SearchClientOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public SearchClientOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String PHONE_NUMBER_QUERY = "phoneNumber";

        /**
         * @param phoneNumber (String) Номер телефона клиента (required)
         * @return operation
         */
        public SearchClientOper phoneNumberQuery(Object... phoneNumber) {
            reqSpec.addQueryParam(PHONE_NUMBER_QUERY, phoneNumber);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SearchClientOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SearchClientOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить данные о регистрации клиента
     * 
     *
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #phoneNumberQuery Номер телефона клиента (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * return GetClientRegistrationResponse
     */
    public static class SearchClientRegistrationOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/clients/registration";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SearchClientRegistrationOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /clients/registration
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /clients/registration
         * @param handler handler
         * @return GetClientRegistrationResponse
         */
        public GetClientRegistrationResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetClientRegistrationResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public SearchClientRegistrationOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public SearchClientRegistrationOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public SearchClientRegistrationOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public SearchClientRegistrationOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public SearchClientRegistrationOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String PHONE_NUMBER_QUERY = "phoneNumber";

        /**
         * @param phoneNumber (String) Номер телефона клиента (required)
         * @return operation
         */
        public SearchClientRegistrationOper phoneNumberQuery(Object... phoneNumber) {
            reqSpec.addQueryParam(PHONE_NUMBER_QUERY, phoneNumber);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public SearchClientRegistrationOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public SearchClientRegistrationOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Получить список транзакций по карте
     * 
     *
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #xClientAuthenticationHeader Токен аутентификации клиента (required)
     * @see #cardIdPath Идентификатор карты (required)
     * @see #dateFromQuery Начало периода (required)
     * @see #dateToQuery Конец периода (required)
     * @see #offsetQuery Порядковый номер первого элемента списка, возвращаемого в запросе (optional, default to 0)
     * @see #limitQuery Максимальное число возращаемых элементов в запросе (optional)
     * return GetCardTransactionsResponse
     */
    public static class TransactionsCardsCardIdGetOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/transactions/cards/{cardId}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public TransactionsCardsCardIdGetOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /transactions/cards/{cardId}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /transactions/cards/{cardId}
         * @param handler handler
         * @return GetCardTransactionsResponse
         */
        public GetCardTransactionsResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<GetCardTransactionsResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public TransactionsCardsCardIdGetOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public TransactionsCardsCardIdGetOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public TransactionsCardsCardIdGetOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public TransactionsCardsCardIdGetOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        public static final String X_CLIENT_AUTHENTICATION_HEADER = "X-Client-Authentication";

        /**
         * @param xClientAuthentication (String) Токен аутентификации клиента (required)
         * @return operation
         */
        public TransactionsCardsCardIdGetOper xClientAuthenticationHeader(String xClientAuthentication) {
            reqSpec.addHeader(X_CLIENT_AUTHENTICATION_HEADER, xClientAuthentication);
            return this;
        }

        public static final String CARD_ID_PATH = "cardId";

        /**
         * @param cardId (String) Идентификатор карты (required)
         * @return operation
         */
        public TransactionsCardsCardIdGetOper cardIdPath(Object cardId) {
            reqSpec.addPathParam(CARD_ID_PATH, cardId);
            return this;
        }

        public static final String DATE_FROM_QUERY = "dateFrom";

        /**
         * @param dateFrom (OffsetDateTime) Начало периода (required)
         * @return operation
         */
        public TransactionsCardsCardIdGetOper dateFromQuery(Object... dateFrom) {
            reqSpec.addQueryParam(DATE_FROM_QUERY, dateFrom);
            return this;
        }

        public static final String DATE_TO_QUERY = "dateTo";

        /**
         * @param dateTo (OffsetDateTime) Конец периода (required)
         * @return operation
         */
        public TransactionsCardsCardIdGetOper dateToQuery(Object... dateTo) {
            reqSpec.addQueryParam(DATE_TO_QUERY, dateTo);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) Порядковый номер первого элемента списка, возвращаемого в запросе (optional, default to 0)
         * @return operation
         */
        public TransactionsCardsCardIdGetOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) Максимальное число возращаемых элементов в запросе (optional)
         * @return operation
         */
        public TransactionsCardsCardIdGetOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public TransactionsCardsCardIdGetOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public TransactionsCardsCardIdGetOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Передать данные для регистрации клиента
     * 
     *
     * @see #xCallIDHeader Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
     * @see #initiatorHostHeader Вызывающий host (required)
     * @see #initiatorServiceHeader Система, к которой относится host (required)
     * @see #xPartnerIDHeader Идентификатор партнера (required)
     * @see #body  (optional)
     */
    public static class UpdateOrCreateClientRegistrationOper implements Oper {

        public static final Method REQ_METHOD = PUT;
        public static final String REQ_URI = "/clients/registration";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateOrCreateClientRegistrationOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PUT /clients/registration
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

         /**
         * @param updateClientRegistrationRequest (UpdateClientRegistrationRequest)  (optional)
         * @return operation
         */
        public UpdateOrCreateClientRegistrationOper body(UpdateClientRegistrationRequest updateClientRegistrationRequest) {
            reqSpec.setBody(updateClientRegistrationRequest);
            return this;
        }

        public static final String X_CALL_I_D_HEADER = "X-Call-ID";

        /**
         * @param xCallID (String) Идентификатор запроса, от 20 до 200 символов, [a-zA-Z0-9] (required)
         * @return operation
         */
        public UpdateOrCreateClientRegistrationOper xCallIDHeader(String xCallID) {
            reqSpec.addHeader(X_CALL_I_D_HEADER, xCallID);
            return this;
        }

        public static final String INITIATOR_HOST_HEADER = "initiatorHost";

        /**
         * @param initiatorHost (String) Вызывающий host (required)
         * @return operation
         */
        public UpdateOrCreateClientRegistrationOper initiatorHostHeader(String initiatorHost) {
            reqSpec.addHeader(INITIATOR_HOST_HEADER, initiatorHost);
            return this;
        }

        public static final String INITIATOR_SERVICE_HEADER = "initiatorService";

        /**
         * @param initiatorService (String) Система, к которой относится host (required)
         * @return operation
         */
        public UpdateOrCreateClientRegistrationOper initiatorServiceHeader(String initiatorService) {
            reqSpec.addHeader(INITIATOR_SERVICE_HEADER, initiatorService);
            return this;
        }

        public static final String X_PARTNER_I_D_HEADER = "X-Partner-ID";

        /**
         * @param xPartnerID (String) Идентификатор партнера (required)
         * @return operation
         */
        public UpdateOrCreateClientRegistrationOper xPartnerIDHeader(String xPartnerID) {
            reqSpec.addHeader(X_PARTNER_I_D_HEADER, xPartnerID);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public UpdateOrCreateClientRegistrationOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public UpdateOrCreateClientRegistrationOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}

/*
 * API сервиса prepaid карты для Партнёра
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.3.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package sZZZ;

import com.google.gson.reflect.TypeToken;
import sZZZ.model.InlineObject;
import sZZZ.model.InlineResponse200;

import java.util.Arrays;
import java.util.List;

import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import static io.restassured.http.Method.*;

@Api(value = "OAuth20")
public class OAuth20Api {

    private Supplier<RequestSpecBuilder> reqSpecSupplier;
    private Consumer<RequestSpecBuilder> reqSpecCustomizer;

    private OAuth20Api(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        this.reqSpecSupplier = reqSpecSupplier;
    }

    public static OAuth20Api oAuth20(Supplier<RequestSpecBuilder> reqSpecSupplier) {
        return new OAuth20Api(reqSpecSupplier);
    }

    private RequestSpecBuilder createReqSpec() {
        RequestSpecBuilder reqSpec = reqSpecSupplier.get();
        if(reqSpecCustomizer != null) {
            reqSpecCustomizer.accept(reqSpec);
        }
        return reqSpec;
    }

    public List<Oper> getAllOperations() {
        return Arrays.asList(
                oauth2AuthorizeGet(),
                oauth2TokenPost()
        );
    }

    @ApiOperation(value = "Authorization endpoint",
            notes = "Метод для авторизации Oauth2 приложений",
            nickname = "oauth2AuthorizeGet",
            tags = { "OAuth 2.0" })
    @ApiResponses(value = { 
            @ApiResponse(code = 302, message = "Успешная авторизация")  })
    public Oauth2AuthorizeGetOper oauth2AuthorizeGet() {
        return new Oauth2AuthorizeGetOper(createReqSpec());
    }

    @ApiOperation(value = "Token endpoint",
            notes = "Метод для получения токенов доступа",
            nickname = "oauth2TokenPost",
            tags = { "OAuth 2.0" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "Bad Request") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 500, message = "Internal Server Error")  })
    public Oauth2TokenPostOper oauth2TokenPost() {
        return new Oauth2TokenPostOper(createReqSpec());
    }

    /**
     * Customize request specification
     * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
     * @return api
     */
    public OAuth20Api reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
        this.reqSpecCustomizer = reqSpecCustomizer;
        return this;
    }

    /**
     * Authorization endpoint
     * Метод для авторизации Oauth2 приложений
     *
     * @see #scopeQuery Всегда значение openid (required)
     * @see #redirectUriQuery Адрес приложения, куда пользователь будет перенаправлен по завершению авторизации (required)
     * @see #stateQuery Значение, используемое для защиты от csrf атак (required)
     * @see #clientIdQuery Идентификатор вашего приложения, полученный при регистрации (required)
     * @see #responseTypeQuery Тип авторизации, которую запрашивает клиент (required)
     * @see #phoneNumberQuery Номер телефона (optional)
     */
    public static class Oauth2AuthorizeGetOper implements Oper {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/oauth2/authorize";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public Oauth2AuthorizeGetOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /oauth2/authorize
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        public static final String SCOPE_QUERY = "scope";

        /**
         * @param scope (String) Всегда значение openid (required)
         * @return operation
         */
        public Oauth2AuthorizeGetOper scopeQuery(Object... scope) {
            reqSpec.addQueryParam(SCOPE_QUERY, scope);
            return this;
        }

        public static final String REDIRECT_URI_QUERY = "redirect_uri";

        /**
         * @param redirectUri (String) Адрес приложения, куда пользователь будет перенаправлен по завершению авторизации (required)
         * @return operation
         */
        public Oauth2AuthorizeGetOper redirectUriQuery(Object... redirectUri) {
            reqSpec.addQueryParam(REDIRECT_URI_QUERY, redirectUri);
            return this;
        }

        public static final String STATE_QUERY = "state";

        /**
         * @param state (String) Значение, используемое для защиты от csrf атак (required)
         * @return operation
         */
        public Oauth2AuthorizeGetOper stateQuery(Object... state) {
            reqSpec.addQueryParam(STATE_QUERY, state);
            return this;
        }

        public static final String CLIENT_ID_QUERY = "client_id";

        /**
         * @param clientId (String) Идентификатор вашего приложения, полученный при регистрации (required)
         * @return operation
         */
        public Oauth2AuthorizeGetOper clientIdQuery(Object... clientId) {
            reqSpec.addQueryParam(CLIENT_ID_QUERY, clientId);
            return this;
        }

        public static final String RESPONSE_TYPE_QUERY = "response_type";

        /**
         * @param responseType (String) Тип авторизации, которую запрашивает клиент (required)
         * @return operation
         */
        public Oauth2AuthorizeGetOper responseTypeQuery(Object... responseType) {
            reqSpec.addQueryParam(RESPONSE_TYPE_QUERY, responseType);
            return this;
        }

        public static final String PHONE_NUMBER_QUERY = "phone_number";

        /**
         * @param phoneNumber (String) Номер телефона (optional)
         * @return operation
         */
        public Oauth2AuthorizeGetOper phoneNumberQuery(Object... phoneNumber) {
            reqSpec.addQueryParam(PHONE_NUMBER_QUERY, phoneNumber);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public Oauth2AuthorizeGetOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public Oauth2AuthorizeGetOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
    /**
     * Token endpoint
     * Метод для получения токенов доступа
     *
     * @see #authorizationHeader Клиентская авторизация. В качестве токена используются параметры клиента clientId, clientSecret, сформированные следующим образом: * base64(clientId:clientSecret) где base64() - функция, кодирующая строку в base64 формат (required)
     * @see #body  (optional)
     * return InlineResponse200
     */
    public static class Oauth2TokenPostOper implements Oper {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/oauth2/token";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public Oauth2TokenPostOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("application/json");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /oauth2/token
         * @param handler handler
         * @param <T> type
         * @return type
         */
        @Override
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /oauth2/token
         * @param handler handler
         * @return InlineResponse200
         */
        public InlineResponse200 executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<InlineResponse200>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param inlineObject (InlineObject)  (optional)
         * @return operation
         */
        public Oauth2TokenPostOper body(InlineObject inlineObject) {
            reqSpec.setBody(inlineObject);
            return this;
        }

        public static final String AUTHORIZATION_HEADER = "Authorization";

        /**
         * @param authorization (String) Клиентская авторизация. В качестве токена используются параметры клиента clientId, clientSecret, сформированные следующим образом: * base64(clientId:clientSecret) где base64() - функция, кодирующая строку в base64 формат (required)
         * @return operation
         */
        public Oauth2TokenPostOper authorizationHeader(String authorization) {
            reqSpec.addHeader(AUTHORIZATION_HEADER, authorization);
            return this;
        }

        /**
         * Customize request specification
         * @param reqSpecCustomizer consumer to modify the RequestSpecBuilder
         * @return operation
         */
        public Oauth2TokenPostOper reqSpec(Consumer<RequestSpecBuilder> reqSpecCustomizer) {
            reqSpecCustomizer.accept(reqSpec);
            return this;
        }

        /**
         * Customize response specification
         * @param respSpecCustomizer consumer to modify the ResponseSpecBuilder
         * @return operation
         */
        public Oauth2TokenPostOper respSpec(Consumer<ResponseSpecBuilder> respSpecCustomizer) {
            respSpecCustomizer.accept(respSpec);
            return this;
        }
    }
}
